#include "mpui2c.h"
#include "delay.h"
#include "usart.h"

// IO方向设置
#define MPU_SDA_IN()  { GPIOB->CRH&=0XFFFFFF0F; GPIOB->CRH|=0x00000080; }
#define MPU_SDA_OUT() { GPIOB->CRH&=0XFFFFFF0F; GPIOB->CRH|=0x00000030; }

// IO操作函数
#define MPU_I2C_SCL    PBout(8)  // SCL
#define MPU_I2C_SDA    PBout(9)  // SDA
#define MPU_READ_SDA   PBin(9)   // 输入SDA

// I2C 延时函数
void mpu_i2c_delay(void) {
  delay_us(2);
}


// 产生I2C起始信号, 获得控制权
void mpu_i2c_start(void) {
  MPU_SDA_OUT(); // sda线输出
  MPU_I2C_SDA = 1;
  MPU_I2C_SCL = 1;
  mpu_i2c_delay();
  MPU_I2C_SDA = 0; // START: when CLK is high, DATA change form high to low 
  mpu_i2c_delay();
  MPU_I2C_SCL = 0; // 钳住I2C总线，准备发送或接收数据 
}

// 产生I2C停止信号
void mpu_i2c_stop(void) {
  MPU_SDA_OUT(); // sda线输出
  MPU_I2C_SCL = 0;
  MPU_I2C_SDA = 0; // STOP: when CLK is high, DATA change form low to high
  mpu_i2c_delay();
  MPU_I2C_SCL = 1; 
  MPU_I2C_SDA = 1; // 发送I2C总线结束信号
  mpu_i2c_delay();
}

// 等待应答信号到来
// 返回值：1, 接收应答失败 0, 接收应答成功
u8 mpu_i2c_wait_ack(void) {
  u8 ucErrTime=0;
  MPU_SDA_IN(); // SDA设置为输入
  MPU_I2C_SDA = 1;
  mpu_i2c_delay();
  MPU_I2C_SCL = 1;
  mpu_i2c_delay();
  while (MPU_READ_SDA) {
    ucErrTime++;
    if (ucErrTime > 250) {
      mpu_i2c_stop();
      return 1;
    }
  }
  MPU_I2C_SCL = 0; // 时钟输出0
  return 0;  
} 

// 产生ACK应答
void mpu_i2c_ack(void) {
  MPU_I2C_SCL = 0;
  MPU_SDA_OUT();
  MPU_I2C_SDA = 0;
  mpu_i2c_delay();
  MPU_I2C_SCL = 1;
  mpu_i2c_delay();
  MPU_I2C_SCL = 0;
}

// 不产生ACK应答
void mpu_i2c_nack(void) {
  MPU_I2C_SCL = 0;
  MPU_SDA_OUT();
  MPU_I2C_SDA = 1;
  mpu_i2c_delay();
  MPU_I2C_SCL = 1;
  mpu_i2c_delay();
  MPU_I2C_SCL = 0;
}

// I2C发送一个字节
// 返回从机有无应答 1,有应答 0, 无应答
void mpu_i2c_send_byte(u8 txd) {
  u8 t;
  MPU_SDA_OUT();
  MPU_I2C_SCL = 0; // 拉低时钟开始数据传输
  for (t = 0; t<8; t++) {
    MPU_I2C_SDA = (txd & 0x80) >> 7;
    txd <<= 1;
    MPU_I2C_SCL = 1;
    mpu_i2c_delay(); 
    MPU_I2C_SCL = 0;
    mpu_i2c_delay();
  }
}

// 读1个字节, ack=1时,发送ACK; ack=0, 发送nACK
u8 mpu_i2c_read_byte(unsigned char ack) {
  unsigned char i, receive = 0;
  MPU_SDA_IN(); // SDA设置为输入
  for (i = 0; i < 8; i++ ) {
    MPU_I2C_SCL = 0; 
    mpu_i2c_delay();
    MPU_I2C_SCL = 1;
    receive <<= 1;
    if (MPU_READ_SDA) receive++;
    mpu_i2c_delay(); 
  }
  if (!ack)
    mpu_i2c_nack(); // 发送nACK
  else
    mpu_i2c_ack(); // 发送ACK
  return receive;
}

// 初始化I2C
void mpu_i2c_init(void) {
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); // 先使能外设IO PORTB时钟 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9; // 端口配置
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  // 推挽输出
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  // IO口速度为50MHz
  GPIO_Init(GPIOB, &GPIO_InitStructure);  // 根据设定参数初始化GPIO 
  GPIO_SetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9); // PB8,PB9 输出高
}
