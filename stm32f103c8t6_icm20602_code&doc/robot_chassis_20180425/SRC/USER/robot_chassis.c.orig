#include <stdio.h>
#include <math.h>
#include "led.h"
#include "key.h"
#include "usart.h"
#include "delay.h"
#include "time.h"
#include "encoder.h"
#include "adc.h"
#include "oled.h"
#include "mpu9250.h"
#include "motor.h"
#include "exti.h"
#include "AHRS.h"

//#define ENABLE_MAGNETIC_FILED

// 全局变量
u8 delay_flag, delay_50ms, delay_10ms = 0;
float battary_voltage = 12.0f;
int left_target_pwm = 0, right_target_pwm = 0; // 电机PWM变量
int left_pid_pwm, right_pid_pwm; // 电机PWM变量
int left_encoder, right_encoder;  // 编码器的脉冲计数

float fuse_std;
float cost;

u8 is_low_power() {
    return battary_voltage < 11.2f ? 1 : 0;
}

/**************************************************************************
函数功能：增量PI控制器
入口参数：编码器测量值，目标速度
返回  值：电机PWM
根据增量式离散PID公式
pwm+=Kp[e（k）-e(k-1)]+Ki*e(k)+Kd[e(k)-2e(k-1)+e(k-2)]
e(k)代表本次偏差
e(k-1)代表上一次的偏差  以此类推
pwm代表增量输出
在我们的速度控制闭环系统里面，只使用PI控制
pwm+=Kp[e（k）-e(k-1)]+Ki*e(k)
**************************************************************************/
#define MOTOR_KP 12
#define MOTOR_KI 12
int left_PID_control(int encoder, int target_pwm) {
    static int pid_pwm = 0, last_bias = 0;
    int bias = encoder - target_pwm; //计算偏差
    pid_pwm += MOTOR_KP * (bias - last_bias) + MOTOR_KI * bias; // 增量式PI控制器
    last_bias = bias; // 保存上一次偏差
    return pid_pwm; // 增量输出
}

int right_PID_control(int encoder, int target_pwm) {
    static int pid_pwm = 0, last_bias = 0;
    int bias = encoder - target_pwm; // 计算偏差
    pid_pwm += MOTOR_KP * (bias - last_bias) + MOTOR_KI * bias; // 增量式PI控制器
    last_bias = bias; // 保存上一次偏差
    return pid_pwm; // 增量输出
}

/**************************************************************************
函数功能：所有的控制代码都在这里面
         5ms定时中断由MPU6050的INT引脚触发
         严格保证采样和数据处理的时间同步
**************************************************************************/
int EXTI9_5_IRQHandler(void) {
    if (PBin(5) == 0) { // PB5连接到MPU6050的中断引脚
        EXTI_ClearITPendingBit(EXTI_Line5);
        if (delay_flag == 1) {
            if (++delay_50ms == 10)	 { //给主函数提供50ms的精准延时
                delay_50ms = 0;
                delay_flag = 0;
            }
        }
        if (delay_10ms == 2) {
            // 10ms读取一次陀螺仪、加速度计和磁力计的值并计算姿态
            static u8 is_first_time = 1;
            static u32 prev_ts;
            static float prev_ax, prev_ay, prev_az, prev_gx, prev_gy, prev_gz;
            float cur_ax, cur_ay, cur_az, cur_gx, cur_gy, cur_gz;
            float cur_mean_ax, cur_mean_ay, cur_mean_az, cur_mean_gx, cur_mean_gy, cur_mean_gz;
            float cur_var_ax, cur_var_ay, cur_var_az, cur_var_gx, cur_var_gy, cur_var_gz;
            u8 is_valid = 1;
            u32 cur_ts = millis();
#ifdef ENABLE_MAGNETIC_FILED
            static float prev_mx, prev_my, prev_mz;
            float cur_mx, cur_my, cur_mz;
            float cur_mean_mx, cur_mean_my, cur_mean_mz;
            float cur_var_mx, cur_var_my, cur_var_mz;
            is_valid &= mpu_9250_read_mag_and_statistic(
                            &cur_mx, &cur_my, &cur_mz,
                            &cur_mean_mx, &cur_mean_my, &cur_mean_mz,
                            &cur_var_mx, &cur_var_my, &cur_var_mz,
                        );
#endif
            is_valid &= mpu_9250_read_accel_gyro_and_statistic(
                            &cur_ax, &cur_ay, &cur_az,
                            &cur_gx, &cur_gy, &cur_gz,
                            &cur_mean_ax, &cur_mean_ay, &cur_mean_az,
                            &cur_var_ax, &cur_var_ay, &cur_var_az,
                            &cur_mean_gx, &cur_mean_gy, &cur_mean_gz,
                            &cur_var_gx, &cur_var_gy, &cur_var_gz
                        );
            if (is_first_time) {
                is_first_time = 0;
            } else {
                static u8 is_calibrated = 0;
                u32 cost_ts = millis();
                // https://github.com/kriswiner/MPU9250/issues/220#
                // https://github.com/kriswiner/MPU9250/issues/51
                float dt = (float)(cur_ts - prev_ts) / 1000.0;
                
                if (is_valid) {
                    fuse_std = sqrt(cur_var_ax + cur_var_ay + cur_var_az);
                    if (is_calibrated && fuse_std > 0.030) {
                        // Pass gyro rate as rad/s
                //MadgwickAHRSUpdate(prev_gy, prev_gx, -prev_gz, prev_ay, prev_ax, -prev_az, prev_mx, prev_my, prev_mz, dt);
                //MahonyAHRSUpdate(prev_gy, prev_gx, -prev_gz, prev_ay, prev_ax, -prev_az, prev_mx, prev_my, prev_mz, dt);
                //MadgwickAHRSUpdateIMU(prev_gy, prev_gx, -prev_gz, prev_ay, prev_ax, -prev_az, dt);
                //MahonyAHRSUpdateIMU(prev_gy, prev_gx, -prev_gz, prev_ay, prev_ax, -prev_az, dt);
                //MahonyAHRSUpdateIMU(prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az, dt);
                //MahonyAHRSUpdateIMU(prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az, dt);
                        MahonyAHRSUpdateIMU(prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az, dt);
                        Quat2Angle();
                    } else if (!is_calibrated && fuse_std <= 0.030) {
                        mpu_9250_set_accel_gyro_bias(0, 0, 0, cur_mean_gx, cur_mean_gy, cur_mean_gz);
                        printf("Accel&Gyro bias: %f, %f, %f, %f, %f, %f\n", 0, 0, 0, cur_mean_gx, cur_mean_gy, cur_mean_gz);
                        is_calibrated = 1;
                    }
                    //printf("%f, %f, %f\n", prev_gx, prev_gy, prev_gz);
                    //MahonyAHRSUpdateIMU(prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az, dt);
                    //Quat2Angle();
                }
                cost = (millis() - cost_ts) / 1000.0f;
#endif
                //printf("%d %f %f %f %f\n", ret_code, dt, roll, pitch, yaw);
                //printf("%f %f %f %f %f %f %f %f %f %f\n", dt, prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az, prev_mx, prev_my, prev_mz);
                //printf("%f %f %f %f %f %f\n", prev_gx, prev_gy, prev_gz, prev_ax, prev_ay, prev_az);
            }
            prev_ts = cur_ts;
            prev_ax = cur_ax;
            prev_ay = cur_ay;
            prev_az = cur_az;
            prev_gx = cur_gx;
            prev_gy = cur_gy;
            prev_gz = cur_gz;
#ifdef ENABLE_MAGNETIC_FILED
            prev_mx = cur_mx,
            prev_my = cur_my;
            prev_mz = cur_mz;
#endif
            // 10ms更新一次电池电压值
            battary_voltage = get_battery_volt() / 100.0f;
            // LED闪烁: 常规模式1s闪烁一次, 低电压0.1s闪烁一次
            led_toggle(is_low_power() ? 10 : 100);
#if 0
            // 10ms控制电机一次，为了保证M法测速的时间基准，首先读取编码器数据
            left_target_pwm = is_low_power() ? 0 : 3;
            right_target_pwm = is_low_power() ? 0 : -3;
            // 读取左右电机编码器值
            left_encoder = encoder_read(2);
            right_encoder = encoder_read(4);
            // PID控制
            left_pid_pwm = left_PID_control(left_encoder, left_target_pwm); // 速度闭环控制计算电机1最终PWM
            right_pid_pwm = right_PID_control(right_encoder, right_target_pwm); // 速度闭环控制计算电机2最终PWM
            // 设置左右点击PWM值
            motor_set_pwm(&left_pid_pwm, &right_pid_pwm);
#endif
            delay_10ms = 0;
        }
        if (delay_10ms == 0) {
            //mpu_9250_prepare_mag_data();
        }
        delay_10ms++;
    }
    return 0;
}

int main(void) {
    u8 ret_code;
    char show_string[255];
    //SystemInit();
    NVIC_Configuration();
    led_init();
    key_init();
    usart_init(115200);
    delay_init();
    time_init();
    encoder_init();
    adc_init();
    oled_init();
    oled_clear();
    oled_show_string(0, 0, "calibrating...\nkeep still.");
    ret_code = mpu_9250_init();
    motor_init(7199, 0); // PWM=10KHZ
    exti_init();
    while(1) {
        delay_flag = 1;
        delay_50ms = 0;
        while(delay_flag); // 通过MPU6050的INT中断实现的50ms精准延时
        sprintf(show_string, "roll:%.3f      \npitch:%.3f           \nyaw:%.3f         \n%.1f %.3f %f      ", roll, pitch, yaw, battary_voltage, cost, fuse_std);
        oled_show_string(0, 0, show_string);
    }
}
